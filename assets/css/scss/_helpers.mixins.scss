/*------------------------------------*\
    #MIXINS
\*------------------------------------*/




/**
  * Align block vertically central
*/

@mixin vertical-align {
    position: absolute;
    top: 50%;
    -webkit-transform: translateY(-50%);
        -ms-transform: translateY(-50%);
            transform: translateY(-50%);
}


/** 
  * antialiasing mode font rendering
  */

@mixin font-smoothing {
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}


/** 
  * Apply attention styles in one go.
*/

@mixin attention($self: false) {

    @if($self != false) {

        &,
        &:hover,
        &:active,
        &:focus {
            @content;
        }

    }

    @else {

        &:hover,
        &:active,
        &:focus {
            @content;
        }

    }

}




/**
  * Box rounding
*/

@mixin rounded($radius) {
  -webkit-border-radius: $radius;
     -moz-border-radius: $radius;
          border-radius: $radius;
}




/**
  * Function for converting a px based font-size to rem.
*/

@mixin font-size($size) {
    font-size: $size;
    font-size: calculateRem($size);
}






/**
  * Box shadow
*/

@mixin shadow($x, $y, $blur, $color) {
  -webkit-box-shadow: $x $y $blur $color;
     -moz-box-shadow: $x $y $blur $color;
          box-shadow: $x $y $blur $color;
}




/**
  * Inset box shadow
*/

@mixin shadow-inset($x, $y, $blur, $color) {
  -webkit-box-shadow: inset $x $y $blur $color;
     -moz-box-shadow: inset $x $y $blur $color;
          box-shadow: inset $x $y $blur $color;
}




/**
  * Align block vertically central
*/

@mixin transition($property, $time, $ease) {
  -webkit-transition: $property $time $ease;
     -moz-transition: $property $time $ease;
       -o-transition: $property $time $ease;
          transition: $property $time $ease;
}




/**
  * Box sizing
*/

@mixin box-sizing($border-box) {
  -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
         box-sizing: border-box;
}




/**
  * Opacity
*/

@mixin opacity($opacity, $percentage) {
    opacity: $opacity; filter: alpha(opacity = $percentage); zoom:1;
}




/**
  * Linear gradients
*/

@mixin linear-gradient($from, $to) {
  // Fallback for sad browsers
  background-color: $to;
  // Mozilla Firefox
  background-image: -moz-linear-gradient($from, $to);
  // Opera
  background-image: -o-linear-gradient($from, $to);
  // Webkit (Safari 4+, Chrome 1+)
  background-image: -webkit-gradient(linear, left top, left bottom, color-stop(0, $from), color-stop(1, $to));
  // Webkit (Chrome 11+)
  background-image: -webkit-linear-gradient($from, $to);
  // IE 10
  background-image: -ms-linear-gradient($from, $to);
  // W3C
  background-image: linear-gradient($from, $to);
}




/**
  * Clear after floats
*/

@mixin clearfix {
  zoom:1;
  &:before, &:after {
    content: "\0020";
    display: block;
    height: 0;
    overflow: hidden;
  }
  &:after {
    clear: both;
  }
}




/**
  * Function for converting a px based font-size to rem.
*/

@mixin font-size($size) {
    font-size: $size;
    font-size: calculateRem($size);
}




/**
  * Apply clearfix to this classes by default
*/

.clearfix, .group{
    @include clearfix;
}




/**
  * Responsive mixins
*/

@mixin responsive($res)
{
  @media screen and (max-width: $res)
  {
    @content;
  }
}




@mixin mf($res)
{
  @media screen and (min-width: $res)
  {
    @content;
  }
}



@mixin mobilefirst-between($start, $end)
{
  @media screen and (min-width: $start) and (max-width : $end)
  {
    @content;
  }
}




/**
  * Generic Transform
*/

@mixin transform($transforms) {
     -moz-transform: $transforms;
       -o-transform: $transforms;
      -ms-transform: $transforms;
  -webkit-transform: $transforms;
          transform: $transforms;
}




/**
  * Translate mixin
*/

@mixin translate ($x, $y) {
   @include transform(translate($x, $y));
}




/**
  * Transform Origin
*/

@mixin transform-origin ($origin) {
    moz-transform-origin: $origin;
       -o-transform-origin: $origin;
      -ms-transform-origin: $origin;
  -webkit-transform-origin: $origin;
          transform-origin: $origin;
}



/** 
  * Create all specified heading styles in one go.
*/

@mixin headings($from: 1, $to: 6) {

    %base-heading {
        @content;
    }

    @if $from >= 1 and $to <= 6{

        @for $i from $from through $to{

            h#{$i} {
                @extend %base-heading;
            }

        }

    }

}


@mixin font-weight($font-weight) {

    @if ($font-weight == "regular") {
        font-weight: 300;
    }

    @if ($font-weight == "bold") {
        font-weight: 600;
    }

}
